#! /usr/bin/env python

import threading
import rospy
from std_srvs.srv import Trigger
from ros_internet_speed.msg import InternetSpeedReport

from speedtest import Speedtest

info = rospy.loginfo
warn = rospy.logwarn

class InternetSpeedNode:
    def __init__(self):
        rospy.init_node("internet_speed_node")
        self.thread = None
        self.srv = rospy.Service("/internet_speed_node/run_speed_test", Trigger, self.speedtest_srv_callback)
        self.pub = rospy.Publisher("internet_speed", InternetSpeedReport, queue_size=1)
        info("ROS Internet Speed Node is ready")
        rospy.spin()

    def test_speed(self):
        msg = InternetSpeedReport()
        msg.header.stamp = rospy.Time.now()
        msg.status_description = "Getting test server"
        msg.status = 0
        self.pub.publish(msg)
        info("Running internet speed test")

        speedtest = Speedtest()
        speedtest.get_best_server()
        msg.server = speedtest.results.server["sponsor"] + ", " + speedtest.results.server["name"]
        msg.client = speedtest.results.client["ip"]
        msg.timestamp = speedtest.results.timestamp
        msg.ping = speedtest.results.ping
        msg.status_description = "Testing download speed"
        msg.status = 1
        self.pub.publish(msg)
        info("Test server: " + msg.server)
        info("Ping: {:.1f} ms".format(msg.ping))

        speedtest.download()
        msg.download_speed = speedtest.results.download
        msg.bytes_received = speedtest.results.bytes_received
        msg.status_description = "Testing upload speed"
        msg.status = 2
        self.pub.publish(msg)
        info("Download speed: {:.3f} Mbps".format(msg.download_speed/1000000))

        speedtest.upload()
        msg.upload_speed = speedtest.results.upload
        msg.bytes_sent = speedtest.results.bytes_sent
        msg.status_description = "Test completed"
        msg.status = 3
        self.pub.publish(msg)
        info("Upload speed: {:.3f} Mbps".format(msg.upload_speed/1000000))
        info("Test completed")

    def speedtest_srv_callback(self, req):
        if self.thread is not None and self.thread.is_alive():
            warn("Speed test is already running")
            return {"success": False, "message": "Speed test is already running"}
        self.thread = threading.Thread(target=self.test_speed)
        self.thread.start()
        return {"success": True, "message": "Internet peed test started"}


def main():
    node = InternetSpeedNode()

if __name__ == "__main__":
    main()
